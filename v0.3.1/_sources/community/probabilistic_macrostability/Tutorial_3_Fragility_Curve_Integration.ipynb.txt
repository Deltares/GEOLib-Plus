{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e57c1a6b",
   "metadata": {},
   "source": [
    "### Tutorial 3: Integrating the fragility curve with the probability density function of the waterlevel, and derive influence coefficients after integration"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc93fda9",
   "metadata": {},
   "source": [
    "#### Create base `class DStabilityFragilityCurve` for fragility curve operations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d92c9058",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading the necesary packages\n",
    "import json # for reading fragility curves in D-Stability .json format\n",
    "import numpy as np # for array calculations\n",
    "import scipy.stats as st # for statisitcal functions\n",
    "import pandas as pd # for reading excel files\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from scipy.interpolate import interp1d # for linear interpolation and extrapolation outside the range\n",
    "from statistics import NormalDist\n",
    "from scipy.stats import norm\n",
    "from scipy.stats import gumbel_r"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f00eb582",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define some static functions\n",
    "\n",
    "def densify_extrapolate(x, y, xrange, xdelta):\n",
    "    xnew = np.arange(xrange[0], xrange[1] + xdelta, xdelta)\n",
    "    f = interp1d(x, y, kind='linear', bounds_error=False, fill_value='extrapolate')\n",
    "    ynew = f(xnew)\n",
    "    return xnew, ynew    \n",
    "\n",
    "# Preprocess the DStabilityFragilityCurve class\n",
    "class DStabilityFragilityCurve:\n",
    "    \n",
    "    def __init__(self, label, filename):\n",
    "        \"\"\" --- documentation generated by AI model\n",
    "        Initialize a DStabilityFragilityCurve object, and then\n",
    "        calls `preprocess_rawdata()` to save the raw data in a structured way\n",
    "\n",
    "        Args:\n",
    "            label (str): The label for the DStabilityFragilityCurve object.\n",
    "            filename (str): The name of the JSON file containing the raw data.\n",
    "\n",
    "        Returns:\n",
    "            None.\n",
    "\n",
    "        Raises:\n",
    "            FileNotFoundError: If the specified file does not exist.\n",
    "\n",
    "        \"\"\"     \n",
    "        self.Label = label\n",
    "        with open(filename, 'r') as f:\n",
    "            self.rawdata = json.load(f)\n",
    "        self.preprocess_rawdata()\n",
    "        \n",
    "    def preprocess_rawdata(self):\n",
    "        \"\"\"\n",
    "        Notes\n",
    "        \"\"\" \n",
    "        self.FragilityPoints = self.rawdata.get('Calculations')\n",
    "        self.Stochasts = self.rawdata.get('Stochasts')\n",
    "        self.Correlations = self.rawdata.get('Correlations')\n",
    "        \n",
    "        self.h = [point.get('WaterLevel') for point in self.FragilityPoints]\n",
    "        self.b = [point.get('Beta') for point in self.FragilityPoints]\n",
    "        self.bb =[ -1* point.get('Beta') for point in self.FragilityPoints]\n",
    "        self.p = norm.cdf(self.bb)\n",
    "        self.stochasts = {}\n",
    "        for stochast in self.Stochasts:\n",
    "            if stochast.get('ParameterType') == 'ModelFactor':\n",
    "                self.stochasts.update({stochast.get('Id'): stochast.get('ParameterType')})\n",
    "            else:\n",
    "                self.stochasts.update({stochast.get('Id'): stochast.get('ParameterType')+\n",
    "                                       '.'+stochast.get('Label')})\n",
    "    \n",
    "    def get_scenario_probability(self, file):\n",
    "        # Import the scenario probabliity (weights) from excel file. \n",
    "        # Note the column headers match the labels of the fragility curve\n",
    "        scenario_probability_data = pd.read_excel(file)\n",
    "        self.scenario_h = np.array(scenario_probability_data['h'])\n",
    "        self.scenario_p = np.array(scenario_probability_data[self.Label])\n",
    "        \n",
    "    def set_extrapolation_range_and_density(self, range_h, delta_h ):\n",
    "        self.range_h = range_h\n",
    "        self.delta_h = delta_h\n",
    "          \n",
    "    def densify_extrapolate_fc(self):\n",
    "        # beta's\n",
    "        self.H, self.B = densify_extrapolate(self.h, \n",
    "                                             self.b, \n",
    "                                             self.range_h, \n",
    "                                             self.delta_h)\n",
    "        self.HH, self.PP = densify_extrapolate(self.h, \n",
    "                                               norm.cdf(self.bb), \n",
    "                                               self.range_h, \n",
    "                                               self.delta_h) \n",
    "        # alpha's \n",
    "        self.alphas={}\n",
    "        self.Alphas={}\n",
    "        for unique_stochast_name in set([val for key, val in self.stochasts.items()]):\n",
    "            alphas = [contribution['Alpha'] for point in self.FragilityPoints \n",
    "                      for contribution in point.get('Contributions') \n",
    "                      if self.stochasts[contribution.get('Stochast')] == unique_stochast_name]\n",
    "            H, Alphas = densify_extrapolate(self.h, alphas, self.range_h, self.delta_h)\n",
    "            self.Alphas.update({unique_stochast_name:Alphas})\n",
    "        \n",
    "    def densify_extrapolate_p(self):\n",
    "        self.H, self.P = densify_extrapolate(self.scenario_h, \n",
    "                                             np.log10(self.scenario_p), \n",
    "                                             self.range_h, self.delta_h)\n",
    "        self.P = 10.**self.P\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa30479c",
   "metadata": {},
   "source": [
    "#### Specify the fragility curve names and locations. Instantiate a `DStabilityFragilityCurve` class and save in `FC_list`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "996df6cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Specify the fragility curves in a List( tuple ( label [str] , filename [str] ) ) \n",
    "fragility_curves_list = [ ('FC_q1','../../_static/FC1.json' )]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "be4c26a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import Fragility curves and store the data in a DStabilityFragilityCurve object.\n",
    "FC_list = []\n",
    "for (fc_label, filename) in fragility_curves_list:\n",
    "    FC = DStabilityFragilityCurve(fc_label, filename)\n",
    "    FC_list.append( FC )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "214c12dc",
   "metadata": {},
   "source": [
    " #### Plot the fragility points and the extrapolated fragility curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0011e1e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Choose the range to extrapolate the curves to, and the increment size for analysis\n",
    "range_h = [7,13]\n",
    "delta_h = 0.1\n",
    "            \n",
    "for FC in FC_list:\n",
    "    FC.set_extrapolation_range_and_density(range_h, delta_h)\n",
    "    FC.densify_extrapolate_fc()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "54b544f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_fragility_curves(FC_list):\n",
    "    # Instantiate a figure with a specified size\n",
    "    fig = plt.figure(figsize=(8, 6))\n",
    "    ax = fig.add_subplot(1, 1, 1)\n",
    "        \n",
    "    # Set the axis labels and title\n",
    "    ax.set_xlabel('Water level, h')\n",
    "    ax.set_ylabel(r'Reliability index, $\\beta$')\n",
    "\n",
    "    def plot_fragility_points(fig, h, b, label, color):\n",
    "        # Add the fragility points to the figure\n",
    "        ax.plot(h, b, color=color, marker='o', markersize=10, linestyle='none', \n",
    "                label='Fragility Points {}'.format(label))\n",
    "    \n",
    "    def plot_extrapolated_fragility_curve(fig, h, b, label, color):\n",
    "        # Add the fragility points to the figure\n",
    "        ax.plot(h, b, color=color,  marker='+', linestyle='-', \n",
    "                label='Extrapolated Fragility Curve')\n",
    "     \n",
    "    colors = ['tab:blue']\n",
    "    for i, FC in enumerate(FC_list):\n",
    "        c = colors[i]\n",
    "        plot_fragility_points(fig, FC.h, FC.b, label=FC.Label, color=c)\n",
    "        plot_extrapolated_fragility_curve(fig, h=FC.H, b=FC.B, label=FC.Label, color=c)\n",
    "    \n",
    "    plt.legend()\n",
    "    plt.grid()\n",
    "    return fig, ax\n",
    "\n",
    "# Create the figure\n",
    "fig, ax = plot_fragility_curves(FC_list)\n",
    "\n",
    "# Show the figure\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "485e9973",
   "metadata": {},
   "source": [
    "***\n",
    "### Now we integrate the fragility curve with the probability density of water level.\n",
    "\n",
    "#### Here we assume the water level follows a Gumbel distribution. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d28210f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Introduce the water level distribution function and plot \n",
    "\n",
    "## Parameters of the statistical distribution\n",
    "mu= 11 \n",
    "std = 0.1\n",
    "\n",
    "## Calculating the pdf of the water level f(h); \n",
    "xnew = np.arange(range_h[0], range_h[1]+delta_h, delta_h)\n",
    "fh = np.empty(len(xnew), dtype=object)\n",
    "\n",
    "## Plot the Gumbel distribution and the fragility curve.\n",
    "r = gumbel_r.rvs(loc=mu, scale=std, size=1000)\n",
    "for h in range(len(xnew)):\n",
    "    fh[h]=gumbel_r.pdf(xnew[h], loc=mu, scale=std)\n",
    "\n",
    "fig, ax = plot_fragility_curves(FC_list)\n",
    "plt.plot(xnew , fh,'r-', lw=5, alpha=0.6, label='$f_h$')\n",
    "plt.hist(r, density=True, bins='auto', histtype='stepfilled', alpha=0.5,label='$f_h$ hist' )\n",
    "plt.xlabel(\"Water level, h\")\n",
    "plt.ylabel(\"Reliability\")   \n",
    "plt.legend(loc='best', frameon=False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14c9824b",
   "metadata": {},
   "source": [
    "***\n",
    "### Calculating the probability of exceedence for range of H"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e4291cb",
   "metadata": {},
   "source": [
    "$ P_f = \\int P(F|h) . f_h(h) dh $"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0d288286",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum of $f_h$ =  1.0006303391435327\n"
     ]
    }
   ],
   "source": [
    "## Calculating the f(h); \n",
    "xnew = np.arange(range_h[0], range_h[1]+delta_h, delta_h)\n",
    "fh = np.empty(len(xnew), dtype=object)\n",
    "\n",
    "for h in range(len(xnew)):\n",
    "    fh[h]=gumbel_r.pdf(xnew[h], loc=mu, scale=std)   #Gumbel distribution\n",
    "\n",
    "# Integrate f(h) with stepsize of delta_h -> 1\n",
    "sumFh = sum(fh)*delta_h\n",
    "print('Sum of $f_h$ = ', sum(fh)*delta_h )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "083b7ae8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total failure probability after integration = 3.19e-05\n",
      "Reliability index after integration = 3.998\n"
     ]
    }
   ],
   "source": [
    "#print('The fragility curve is now desified over range {} with \\\n",
    "# stepsize {}:'.format(range_h,delta_h))\n",
    "#print('H',FC_list[0].H)\n",
    "#print('Beta',FC_list[0].B)\n",
    "#print('Pf',norm.cdf(-1*FC_list[0].B)) #P(f/h)\n",
    "#print('fh',fh)  #f(h)\n",
    "\n",
    "P_fh = norm.cdf(-1*FC_list[0].B)                #P(f|h)        \n",
    "Pf = P_fh* fh * delta_h                         #P(f/h)*f(h)*delta    \n",
    "\n",
    "sumPf = sum(Pf)/sumFh\n",
    "print('Total failure probability after integration = %0.2e'%(sumPf))\n",
    "\n",
    "Beta = -1*norm.ppf(sumPf)                        #K2\n",
    "print('Reliability index after integration = %0.3f'%(Beta))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5c18652",
   "metadata": {},
   "source": [
    "***\n",
    "## Calculating the influence coefficients after integration $\\alpha_i | h $\n",
    "\n",
    "$\\alpha_h = \\frac{u^*}{ -\\beta} =\\frac{ \\Phi^{-1}(F_h(h^*))} { \\Phi^{-1}(P_f)}$\n",
    "\n",
    "$ \\Sigma_i ( \\alpha_i |h^*)^2 +\\alpha_h^2 =1 $\n",
    "\n",
    "$\\alpha_{T_i} ^2 = (\\alpha_i |h^*)^2(1-\\alpha_h^2) $  \n",
    "\n",
    "where:\n",
    "\n",
    "$\\alpha_{T_i} $ : transformed influence coefficient(s) of strength variable \n",
    "\n",
    "$ \\alpha_i |h^*$: Influence coefficient(s) of strength variable, directly from FORM at design point water level (e.g., based on interpolation between fragility points)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fe8256be",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "u*, design point (genormeerde waterstand) =  -2.860139676806077\n",
      "\n",
      "𝛼_ℎ (invloedscoëfficiënt van het waterstand) = 0.7153517909441423\n",
      "\n",
      "α_i |h^* =  [ 0.05643247  0.          0.         -0.30353334  0.83616773  0.06107594\n",
      "  0.34022656  0.          0.17395521]\n",
      "\n",
      "Sum of influence factors after integrating the probbaility of water level is:  0.9442383788975067\n"
     ]
    }
   ],
   "source": [
    "#calculating alphas in given design point water level (h_Star)\n",
    "Hs= 11.846                                         \n",
    "\n",
    "# Calculating u* for h*\n",
    "P_us=gumbel_r.pdf(Hs, loc=mu, scale=std)          # \\Phi^{-1}(F_h(h*))\n",
    "us = st.norm.ppf(P_us)                           \n",
    "\n",
    "print('u*, design point (genormeerde waterstand) = ', us)\n",
    "print()\n",
    "alphaH = us/-Beta                                #alphaH = us/-Beta\n",
    "\n",
    "print('𝛼_ℎ (invloedscoëfficiënt van het waterstand) =', alphaH)\n",
    "print()\n",
    "#Getting alphas befor integrating for H^star ( interpolated through fragility curve)\n",
    "\n",
    "a=FC_list[0].Alphas                       \n",
    "for i in a.keys():                          \n",
    "    values = np.array(list(a.values()))\n",
    "\n",
    "# to see the list of parameters\n",
    "#print(a.keys())                               \n",
    "\n",
    "# a function to find the related alpha set interpolated at given h*\n",
    "def find_nearest(array, value):                \n",
    "    array = np.asarray(array)\n",
    "    idx = (np.abs(array - value)).argmin()\n",
    "    return idx\n",
    "\n",
    "idx = find_nearest(FC_list[0].H, value=Hs)    # Finding the related 𝛼𝑖|ℎ∗  based on the h*\n",
    "\n",
    "Alphas = np.zeros(len(values))\n",
    "for i in range(len(values)):\n",
    "    Alphas[i]=values[i][idx]\n",
    "    \n",
    "print('α_i |h^* = ', Alphas)    \n",
    "print()\n",
    "\n",
    "print('Sum of influence factors after integrating the probbaility of water level is: ',\n",
    "      sum(Alphas**2)) \n",
    "\n",
    "# check is equal to 1 if not we should normalize them.\n",
    "# warning:  The Alphas are not added upt to 1 ( error tolerance 1%) \n",
    "# And your Alphas after integration are not reliable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ac0185ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The influence factors of strength paramters are:\n",
      " [0.00155496 0.         0.         0.0449857  0.34138816 0.00182139\n",
      " 0.05651947 0.         0.01477531]\n",
      "\n",
      "Influence factor from water level =  0.5389550127608109\n"
     ]
    }
   ],
   "source": [
    "# transformed influence coefficient(s) of parameters to be determined\n",
    "Alpha_T = Alphas**2*(1-alphaH**2)                \n",
    "print('The influence factors of strength paramters are:\\n', Alpha_T)\n",
    "\n",
    "print()\n",
    "print('Influence factor from water level = ', 1-sum(Alpha_T))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
